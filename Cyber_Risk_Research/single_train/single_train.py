import simpy
import numpy as np
import time


class single_train_schedule:
    '''
    many trains are generated by one control point,
    here I want to output the schedule of each train.
    '''

    def __init__(self, begin, end):
        self.buffer = 3
        self.all_schedule = {}
        self.begin = begin
        self.end = end
        self.T = time
        self.begin_ticks = time.mktime(time.strptime(self.begin, "%Y-%m-%d %H:%M:%S"))
        self.end_ticks = time.mktime(time.strptime(self.end, "%Y-%m-%d %H:%M:%S"))
        self.number = 1
        self.one_schedule = {}
        self.one_detail = {}
        self.speed = {}
        self.distance = {}
        self.time = {}
        self.time[1] = self.begin_ticks
        env = simpy.Environment()
        env.process(self.train(env))
        duration = self.end_ticks - self.begin_ticks
        env.run(until=duration)

    def train(self, env):
        # n is used for create many "one_detail", otherwise all "one_schedule" will be the same
        n = 0

        while True:
            np.random.seed()
            self.speed[self.number] = np.random.normal(3, 0.5) # miles per second
            headway = np.random.normal(15, 3)
            self.all_schedule[self.number] = {}
            self.time[self.number] = self.begin_ticks

            for i in xrange(1, self.number+1):
                self.one_detail[n] = {}
                self.time[i] += headway * 60
                # print(i, self.time[i] - self.begin_ticks)
                self.distance[i] = (self.speed[i] * (self.time[i] - self.begin_ticks)) / 60
                # print(self.speed[i], self.time[i] - self.begin_ticks)
                if i > 1:
                    if self.distance[i] > self.distance[i-1] - self.speed[i-1] * self.buffer:
                        self.distance[i] = self.distance[i-1] - self.speed[i-1] * self.buffer
                self.one_detail[n]['speed(mils/min)'] = round(self.speed[i], 2)
                self.one_detail[n]['distance(miles)'] = round(self.distance[i], 2)
                self.one_detail[n]['headway(mins)'] = round(headway, 2)
                time_standard = self.T.strftime("%Y-%m-%d %H:%M:%S", self.T.localtime(self.time[i]))
                self.one_schedule[time_standard] = self.one_detail[n]
                self.all_schedule[i][time_standard] = self.one_schedule[time_standard]
                n += 1
            self.number += 1
            yield env.timeout(headway * 60)


    def generate_all(self):
        return self.all_schedule
